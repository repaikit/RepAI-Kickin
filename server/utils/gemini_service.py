import google.generativeai as genai
import os
from utils.logger import api_logger

class GeminiService:
    def __init__(self):
        # L·∫•y API key t·ª´ environment variable
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            api_logger.warning("GEMINI_API_KEY not found in environment variables")
            self.model = None
            return
            
        genai.configure(api_key=api_key)
        
        # Kh·ªüi t·∫°o model Gemini
        try:
            # Th·ª≠ gemini-1.5-pro tr∆∞·ªõc, n·∫øu l·ªói th√¨ d√πng gemini-1.5-flash
            try:
                self.model = genai.GenerativeModel('gemini-2.5-pro')
            except:
                self.model = genai.GenerativeModel('gemini-2.5-flash')
            
            # T·∫°o chat session v·ªõi context
            self.chat = self.model.start_chat(history=[])
            api_logger.info("Gemini AI initialized successfully")
        except Exception as e:
            api_logger.error(f"Failed to initialize Gemini AI: {e}")
            self.model = None

    def get_response(self, message: str, user_id: str = None) -> str:
        """Nh·∫≠n message t·ª´ user v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ Gemini"""
        if not self.model:
            return "Xin l·ªói, AI service ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau."
        
        try:
            # Ki·ªÉm tra n·∫øu ƒë√¢y l√† tin nh·∫Øn ƒë·∫ßu ti√™n
            if not hasattr(self, 'user_preferences'):
                self.user_preferences = {}
            
            # N·∫øu l√† tin nh·∫Øn ƒë·∫ßu ti√™n c·ªßa user n√†y
            if user_id and user_id not in self.user_preferences:
                # T·∫°o prompt h·ªèi ng√¥n ng·ªØ b·∫±ng ti·∫øng Anh
                welcome_prompt = f"""
                Hello! I am the AI assistant for the Kickin game.
                Would you like to chat in English or Vietnamese?
                (Please reply: 'English' or 'Ti·∫øng Vi·ªát')
                
                User: {message}
                """
                
                response = self.model.generate_content(welcome_prompt)
                response_text = response.text
                
                # L∆∞u preference d·ª±a tr√™n c√¢u tr·∫£ l·ªùi
                if "ti·∫øng vi·ªát" in message.lower() or "vietnamese" in message.lower():
                    self.user_preferences[user_id] = "vi"
                    return "Great! I will chat with you in Vietnamese. You can ask me anything about the Kickin game! üòä"
                elif "english" in message.lower() or "ti·∫øng anh" in message.lower():
                    self.user_preferences[user_id] = "en"
                    return "Great! I'll chat with you in English. Feel free to ask me anything about the Kickin game! üòä"
                else:
                    # N·∫øu user ch∆∞a ch·ªçn ng√¥n ng·ªØ, h·ªèi l·∫°i b·∫±ng ti·∫øng Anh
                    return "Hello! Would you like to chat in English or Vietnamese? (Please reply: 'English' or 'Ti·∫øng Vi·ªát')"
            
            # L·∫•y ng√¥n ng·ªØ preference c·ªßa user
            user_lang = self.user_preferences.get(user_id, "vi")  # M·∫∑c ƒë·ªãnh ti·∫øng Vi·ªát
            
            # T·∫°o prompt context cho chatbot game
            if user_lang == "vi":
                context = f"""
                B·∫°n l√† m·ªôt AI assistant th√¢n thi·ªán cho game Kickin. 
                H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, vui v·∫ª v√† h·ªØu √≠ch b·∫±ng ti·∫øng Vi·ªát.
                Ng∆∞·ªùi d√πng: {message}
                """
            else:
                context = f"""
                You are a friendly AI assistant for the Kickin game.
                Please respond briefly, cheerfully and helpfully in English.
                User: {message}
                """
            
            response = self.model.generate_content(context)
            return response.text
            
        except Exception as e:
            api_logger.error(f"Error getting Gemini response: {e}")
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n."

# Kh·ªüi t·∫°o service instance
gemini_service = GeminiService() 